var __defProp=Object.defineProperty,__typeError=e=>{throw TypeError(e)},__defNormalProp=(e,t,o)=>t in e?__defProp(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,__publicField=(e,t,o)=>__defNormalProp(e,"symbol"!=typeof t?t+"":t,o),__accessCheck=(e,t,o)=>t.has(e)||__typeError("Cannot "+o),__privateGet=(e,t,o)=>(__accessCheck(e,t,"read from private field"),o?o.call(e):t.get(e)),__privateAdd=(e,t,o)=>t.has(e)?__typeError("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,o),__privateSet=(e,t,o,i)=>(__accessCheck(e,t,"write to private field"),i?i.call(e,o):t.set(e,o),o),__privateMethod=(e,t,o)=>(__accessCheck(e,t,"access private method"),o),__privateWrapper=(e,t,o,i)=>({set _(i){__privateSet(e,t,i,o)},get _(){return __privateGet(e,t,i)}});!function(){"use strict";var e,t,o,i,n,s,a,r,l,c,d,h,p,g,u,m,_,v,b,w,f,y,k,M,P,S,G,E,C,B,I,A,L,T,D,O,N,z,R,j,F,x,W,H,q,U,K,Q,V;class Y{constructor(){__privateAdd(this,n),__privateAdd(this,e,null),__privateAdd(this,t,null),__privateAdd(this,o,new Map),__privateAdd(this,i,!1),__privateMethod(this,n,a).call(this)}initializeBoard(){const o=document.getElementById("myBoard");if(!o)throw console.error("❌ Board element #myBoard not found in DOM"),new Error("Board container element not found");if(console.log("🏁 Initializing chessboard with element:",o),__privateSet(this,e,window.Chessboard("myBoard",__privateGet(this,t))),!__privateGet(this,e))throw console.error("❌ Failed to create Chessboard instance"),new Error("Failed to create chessboard");return console.log("✅ Chessboard initialized successfully"),__privateMethod(this,n,r).call(this),__privateGet(this,e)}get board(){return __privateGet(this,e)}setBoardOrientation(t){var o;if(console.log("🔄 === setBoardOrientation() START ==="),console.log(`   🎯 Problem ID: ${(null==(o=window.currentProblem)?void 0:o.id)||"UNKNOWN"}`),console.log(`   🔍 toMove parameter: ${t}`),!__privateGet(this,e))return void console.error("❌ ERROR - Board not initialized");const i="b"===t?"black":"white";console.log(`   🎨 Setting board orientation: ${i}`);try{__privateGet(this,e).orientation(i),console.log(`   ✅ Board orientation updated successfully to: ${i}`)}catch(n){console.error("   ❌ ERROR setting board orientation:",n)}console.log("🔄 === setBoardOrientation() END ===")}onDrop(e,t){var o;console.log("🎲 === onDrop() START ==="),console.log(`   🎯 Problem ID: ${(null==(o=window.currentProblem)?void 0:o.id)||"NO PROBLEM"}`),console.log(`   🎲 Move attempt: ${e} → ${t}`),document.body.classList.remove("dragging");const i=window.game,n=null==i?void 0:i.move({from:e,to:t,promotion:"q"});if(null===n)return console.log("❌ === ILLEGAL MOVE ==="),"snapback";console.log("✅ === LEGAL MOVE made ==="),console.log(`   🎲 Move: ${n.san} (${e} → ${t})`),window.updateStatus&&window.updateStatus(),window.currentProblem&&Array.isArray(window.currentProblem.solution)&&setTimeout((()=>{window.checkSolution&&window.checkSolution()}),100),console.log("🎲 === onDrop() END ===")}onSnapEnd(){var t;const o=window.game;null==(t=__privateGet(this,e))||t.position((null==o?void 0:o.fen())||"start"),document.body.classList.remove("dragging")}onMouseoverSquare(e,t){const o=window.game,i=null==o?void 0:o.moves({square:e,verbose:!0});if(i&&0!==i.length){__privateMethod(this,n,c).call(this,e);for(let e=0;e<i.length;e++)__privateMethod(this,n,c).call(this,i[e].to)}}onMouseoutSquare(e,t){__privateMethod(this,n,l).call(this)}loadPosition(t){if(console.log(`🔄 Loading position: ${t}`),__privateGet(this,e))try{__privateGet(this,e).position(t),console.log("✅ Board position updated")}catch(o){console.error("❌ Error updating board position:",o)}else console.error("❌ Board not initialized")}updatePosition(e){this.loadPosition(e)}onDragStart(e,t,o,i){console.log(`🎯 Drag start: ${t} from ${e}`),document.body.classList.add("dragging");const a=window.game;return __privateMethod(this,n,s).call(this,a)?(console.log("Game is over - preventing drag"),!1):!("w"===(null==a?void 0:a.turn())&&-1!==t.search(/^b/)||"b"===(null==a?void 0:a.turn())&&-1!==t.search(/^w/))||(console.log("Wrong turn - preventing drag"),!1)}destroy(){__privateGet(this,o).forEach(((e,t)=>{const o=document.getElementById("myBoard");o&&o.removeEventListener(t,e)})),__privateGet(this,o).clear()}}e=new WeakMap,t=new WeakMap,o=new WeakMap,i=new WeakMap,n=new WeakSet,s=function(e){var t;if(!e)return!1;if("function"==typeof e.isGameOver)return e.isGameOver();if("function"==typeof e.game_over)return e.game_over();if("function"==typeof e.gameOver)return e.gameOver();try{const o=null==(t=e.moves)?void 0:t.call(e);return Array.isArray(o)&&0===o.length}catch(o){return console.warn("Could not determine game over status:",o),!1}},a=function(){__privateSet(this,t,{draggable:!0,position:"start",orientation:"white",pieceTheme:"src/img/chesspieces/wikipedia/{piece}.png",onDrop:this.onDrop.bind(this),onSnapEnd:this.onSnapEnd.bind(this),onMouseoutSquare:this.onMouseoutSquare.bind(this),onMouseoverSquare:this.onMouseoverSquare.bind(this),onDragStart:this.onDragStart.bind(this)})},r=function(){console.log("📱 Initializing mobile touch handlers...");const e=document.getElementById("myBoard");if(e&&"ontouchstart"in window){console.log("   📱 Mobile device detected - adding touch handlers");const t=e=>{console.log("📱 Touch start on chessboard")},i=e=>{console.log("📱 Touch move on chessboard - preventing scroll"),e.preventDefault(),e.stopPropagation()};e.addEventListener("touchstart",t,{passive:!0}),e.addEventListener("touchmove",i,{passive:!1}),__privateGet(this,o).set("touchstart",t),__privateGet(this,o).set("touchmove",i),console.log("   ✅ Mobile touch handlers initialized")}else console.log("   💻 Desktop device - skipping mobile touch handlers")},l=function(){const e=window.$;e&&e("#myBoard .square-55d63").css("background","")},c=function(e){const t=window.$;if(!t)return;const o=t(`#myBoard .square-${e}`);let i="#a9a9a9";o.hasClass("black-3c85d")&&(i="#696969"),o.css("background",i)},window.BoardManager=Y;class Z{constructor(){__privateAdd(this,p),__publicField(this,"problems",[]),__publicField(this,"currentProblem",null),__privateAdd(this,d,-1),__privateAdd(this,h,null),console.log("🏗️ ProblemManager initialized")}async loadProblems(){var e,t,o,i;console.log("📂 === LOADING PROBLEMS ===");try{console.log("   🔍 Attempting to fetch problems.json..."),null==(e=__privateGet(this,h))||e.abort(),__privateSet(this,h,new AbortController);const s=["src/data/problems.json","./src/data/problems.json","../src/data/problems.json","data/problems.json","./data/problems.json"];let a=null,r="";for(const e of s)try{if(console.log(`   📂 Trying path: ${e}`),a=await fetch(e,{signal:__privateGet(this,h).signal,cache:"no-cache"}),a.ok){r=e,console.log(`   ✅ Success with path: ${e}`);break}console.log(`   ❌ Failed with status ${a.status}: ${e}`)}catch(n){console.log(`   ❌ Fetch error for ${e}:`,n.message)}if(!a||!a.ok)throw new Error(`Could not load problems.json from any path. Tried: ${s.join(", ")}`);const l=await a.json();console.log("   📊 Data loaded:",{version:l.version,totalPuzzles:l.totalPuzzles,themes:(null==(t=l.themes)?void 0:t.length)||0,puzzles:(null==(o=l.puzzles)?void 0:o.length)||0,problems:(null==(i=l.problems)?void 0:i.length)||0});const c=l.puzzles||l.problems;if(!c||!Array.isArray(c))throw new Error("Invalid data format: puzzles/problems array not found");return this.problems=c,console.log(`   ✅ Loaded ${this.problems.length} problems successfully`),__privateMethod(this,p,g).call(this,this.problems.length),this.problems}catch(s){if("AbortError"===s.name)return console.log("   ⏹️ Request was aborted"),[];console.error("   ❌ Error loading problems:",s),console.log("   🔧 Attempting to use fallback data...");const e=__privateMethod(this,p,u).call(this);if(e)return console.log("   ✅ Using fallback data"),this.problems=e,__privateMethod(this,p,g).call(this,this.problems.length),this.problems;throw __privateMethod(this,p,g).call(this,0,s.message),s}}getRandomProblem(){if(console.log("🎲 === GET RANDOM PROBLEM ==="),!this.problems||0===this.problems.length)return console.error("   ❌ No problems loaded"),null;const e=Math.floor(Math.random()*this.problems.length),t=this.problems[e];return console.log(`   🎯 Selected problem ${e+1}/${this.problems.length}:`,{id:t.id,title:t.title,category:t.category,difficulty:t.difficulty,rating:t.rating}),this.currentProblem=t,__privateSet(this,d,e),window.currentProblem=t,t}displayProblem(e){e?(console.log("🖥️ === DISPLAYING PROBLEM ==="),console.log(`   📋 Problem: ${e.title}`),console.log(`   📂 Category: ${e.category||e.theme}`),console.log(`   ⭐ Difficulty: ${e.difficulty}`),console.log(`   📊 Rating: ${e.rating}`),console.log(`   💎 Points: ${e.points}`),console.log(`   🎯 FEN: ${e.fen}`),__privateMethod(this,p,m).call(this,e)):console.error("❌ No problem to display")}getStatistics(){if(!this.problems||0===this.problems.length)return null;const e={total:this.problems.length,categories:{},difficulties:{},ratings:{min:Math.min(...this.problems.map((e=>e.rating))),max:Math.max(...this.problems.map((e=>e.rating))),avg:Math.round(this.problems.reduce(((e,t)=>e+t.rating),0)/this.problems.length)}};return this.problems.forEach((t=>{const o=t.category||"unknown",i=t.difficulty||"unknown";e.categories[o]=(e.categories[o]||0)+1,e.difficulties[i]=(e.difficulties[i]||0)+1})),e}get problemCount(){var e;return(null==(e=this.problems)?void 0:e.length)||0}destroy(){var e;null==(e=__privateGet(this,h))||e.abort(),this.problems=[],this.currentProblem=null,__privateSet(this,d,-1),window.currentProblem=null}}d=new WeakMap,h=new WeakMap,p=new WeakSet,g=function(e,t=null){const o=document.getElementById("problems-status");o&&(t?(o.textContent=`❌ Feil ved lasting: ${t}`,o.className="status-error"):e>0?(o.textContent=`✅ ${e} problemer lastet`,o.className="status-success"):(o.textContent="⏳ Laster problemer...",o.className="status-loading"))},u=function(){try{return[{id:"fallback_1",type:"tactic",title:"Test Problem - Fork",description:"Find the fork that wins material",fen:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",solution:["e4","e5","Nf3"],hints:["Look for a knight move","Attack two pieces at once"],difficulty:"beginner",category:"fork",points:10,rating:1200},{id:"fallback_2",type:"tactic",title:"Test Problem - Pin",description:"Find the pin that wins the queen",fen:"rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 2",solution:["Bc4","Nf6","Ng5"],hints:["Pin the knight","Attack f7"],difficulty:"intermediate",category:"pin",points:15,rating:1400}]}catch(e){return console.error("Could not create fallback data:",e),null}},m=function(e){var t,o;const i={title:document.getElementById("problem-title")||document.getElementById("problemTitle"),description:document.getElementById("problem-description")||document.getElementById("problemDescription"),category:document.getElementById("category"),difficulty:document.getElementById("difficulty")||document.getElementById("problemDifficulty"),rating:document.getElementById("rating"),points:document.getElementById("points")||document.getElementById("problemPoints")};i.title&&(i.title.textContent=e.title||"Ukjent problem"),i.description&&(i.description.textContent=e.description||""),i.category&&(i.category.textContent=e.category||e.theme||"Ukjent"),i.difficulty&&(i.difficulty.textContent=e.difficulty||"Ukjent"),i.rating&&(i.rating.textContent=(null==(t=e.rating)?void 0:t.toString())||"N/A"),i.points&&(i.points.textContent=(null==(o=e.points)?void 0:o.toString())||"0");const n=document.getElementById("problem-meta");if(n){const t=e.category||e.theme||"ukjent";n.innerHTML=`\n                <span class="category-badge ${t}">${t}</span>\n                <span class="difficulty-badge ${e.difficulty}">${e.difficulty}</span>\n                <span class="rating-badge">Rating: ${e.rating}</span>\n                <span class="points-badge">💎 ${e.points} poeng</span>\n            `}console.log("   ✅ UI updated successfully")};const J=new Z;window.ProblemManager=Z,window.problemManager=J;class X{constructor(){__privateAdd(this,w),__publicField(this,"game",null),__publicField(this,"initialized",!1),__privateAdd(this,_,0),__privateAdd(this,v,0),__privateAdd(this,b,null),console.log("🧠 GameLogic initialized")}initializeGame(){this.game=window.game,this.initialized=!0,console.log("♟️ Game logic initialized")}makeMove(e){if(!this.game)return console.error("❌ Game not initialized"),null;try{return this.game.move(e)}catch(t){return console.error("❌ Invalid move:",e,t),null}}isValidMove(e){if(!this.game)return!1;try{return this.game.moves().includes(e)}catch(t){return!1}}checkSolution(){console.log("🎯 === checkSolution() START ===");const e=window.currentProblem,t=window.game;if(!e)return console.warn("⚠️ No current problem loaded"),__privateMethod(this,w,k).call(this,"Ingen problem lastet!","error"),!1;if(!t)return console.error("❌ Game not available"),!1;const o=t.history({verbose:!0});if(console.log(`📜 Game history (${o.length} moves):`,o),0===o.length)return console.warn("⚠️ No moves made yet"),__privateMethod(this,w,k).call(this,"Du må gjøre et trekk først!","error"),!1;const i=o[o.length-1].san;console.log(`🎯 Player move: ${i} (Index: ${__privateGet(this,_)})`),console.log("📋 Expected solution:",e.solution);const n=e.solution[__privateGet(this,_)];return console.log(`🎯 Expected move at index ${__privateGet(this,_)}: ${n}`),i===n?(__privateWrapper(this,_)._++,console.log(`✅ Correct move! Moving to index ${__privateGet(this,_)}`),__privateGet(this,_)>=e.solution.length?(__privateMethod(this,w,f).call(this),!0):(__privateMethod(this,w,k).call(this,`✅ Riktig trekk! (${__privateGet(this,_)}/${e.solution.length})`,"success"),!0)):(console.log(`❌ Wrong move! Expected: ${n}, Got: ${i}`),__privateMethod(this,w,y).call(this,n,i),!1)}showHint(){const e=window.currentProblem;if(!e||!e.hints||0===e.hints.length)return void __privateMethod(this,w,k).call(this,"Ingen hint tilgjengelig for dette problemet","info");const t=e.hints[__privateGet(this,v)%e.hints.length];__privateMethod(this,w,k).call(this,`💡 Hint: ${t}`,"info",5e3),__privateWrapper(this,v)._++,console.log(`💡 Hint shown: ${t}`)}showSolution(){const e=window.currentProblem;if(!e)return void __privateMethod(this,w,k).call(this,"Ingen problem lastet!","error");const t=e.solution.join(", ");__privateMethod(this,w,k).call(this,`📖 Løsning: ${t}`,"info",8e3);const o=document.getElementById("solution");o&&(o.innerHTML=`\n                <h4>Løsning:</h4>\n                <div class="solution-moves">${e.solution.map(((e,t)=>`<span class="move-number">${t+1}.</span> <span class="move">${e}</span>`)).join(" ")}</div>\n            `,o.style.display="block"),console.log(`📖 Solution shown: ${t}`)}destroy(){__privateGet(this,b)&&clearTimeout(__privateGet(this,b)),__privateSet(this,_,0),__privateSet(this,v,0),this.game=null,this.initialized=!1}}_=new WeakMap,v=new WeakMap,b=new WeakMap,w=new WeakSet,f=function(){console.log("🎉 === SOLUTION COMPLETE ===");const e=window.currentProblem,t=e.points||10,o=window.playerScore||0;window.playerScore=o+t,window.solvedProblems||(window.solvedProblems=[]);const i=window.solvedProblems.includes(e.id);i||window.solvedProblems.push(e.id);const n=i?"🎉 Løsning fullført! (Allerede løst tidligere)":`🎉 Gratulerer! Du løste problemet og fikk ${t} poeng! Ny total: ${window.playerScore}`;__privateMethod(this,w,k).call(this,n,"success",5e3),__privateSet(this,_,0),__privateSet(this,v,0)},y=function(e,t){__privateMethod(this,w,k).call(this,`❌ Feil trekk! Forventet: ${e}, fikk: ${t}`,"error",4e3),__privateSet(this,_,0)},k=function(e,t,o=3e3){const i=window.uiManager;i&&"function"==typeof i.showFeedback?i.showFeedback(e,t,o):console.log(`${t.toUpperCase()}: ${e}`)},window.GameLogic=X;class ee{constructor(){__privateAdd(this,S),__privateAdd(this,M,null),__privateAdd(this,P,[]),console.log("🎨 UIManager initialized")}showFeedback(e,t="info",o=3e3){console.log("💬 === showFeedback() ==="),console.log(`   📝 Message: ${e}`),console.log(`   🎨 Type: ${t}`);const i=document.getElementById("feedback");i?(__privateGet(this,M)&&clearTimeout(__privateGet(this,M)),i.innerHTML=`\n            <div class="feedback-content ${t}">\n                <span class="feedback-icon">${__privateMethod(this,S,G).call(this,t)}</span>\n                <span class="feedback-text">${e}</span>\n            </div>\n        `,i.className=`feedback ${t} show`,i.style.display="block",o>0&&__privateSet(this,M,setTimeout((()=>{this.clearFeedback()}),o)),console.log("   ✅ Feedback displayed successfully")):console.error("❌ Feedback element not found")}clearFeedback(){const e=document.getElementById("feedback");e&&(e.classList.add("fade-out"),setTimeout((()=>{e.style.display="none",e.className="feedback",e.innerHTML=""}),300)),__privateGet(this,M)&&(clearTimeout(__privateGet(this,M)),__privateSet(this,M,null))}showSolution(){const e=window.currentProblem;if(!e)return void this.showFeedback("Ingen problem lastet!","error");const t=document.getElementById("solution");if(!t)return void console.error("❌ Solution element not found");console.log(`📖 Displaying solution for problem: ${e.id}`),console.log("   🎯 Solution moves:",e.solution);const o=(e.solution||[]).map(((e,t)=>`<span class="move-item">\n                <span class="move-number">${t+1}.</span>\n                <span class="move-notation">${e}</span>\n            </span>`)).join("");t.innerHTML=`\n            <div class="solution-content">\n                <h4 class="solution-title">📖 Løsning:</h4>\n                <div class="solution-moves">${o}</div>\n                <div class="solution-meta">\n                    <span class="category">${e.category||e.theme||"Ukjent"}</span>\n                    <span class="difficulty">${e.difficulty}</span>\n                    <span class="rating">Rating: ${e.rating}</span>\n                </div>\n            </div>\n        `,t.style.display="block",t.classList.add("visible"),console.log("   ✅ Solution displayed successfully")}clearSolution(){const e=document.getElementById("solution");e&&(e.style.display="none",e.classList.remove("visible"),e.innerHTML="")}updateGameStatus(e){const t=document.getElementById("status");t&&(t.textContent=e,console.log(`🎮 Game status updated: ${e}`))}updateProblemDisplay(e){console.log("🖥️ Updating problem display:",e.title);const t={title:document.getElementById("problem-title"),description:document.getElementById("problem-description"),category:document.getElementById("category"),difficulty:document.getElementById("difficulty"),rating:document.getElementById("rating"),points:document.getElementById("points")};t.title&&(t.title.textContent=e.title),t.description&&(t.description.textContent=e.description||""),t.category&&(t.category.textContent=e.category||e.theme||"Ukjent"),t.difficulty&&(t.difficulty.textContent=e.difficulty),t.rating&&(t.rating.textContent=e.rating.toString()),t.points&&(t.points.textContent=e.points.toString()),console.log("✅ Problem display updated successfully")}showNotification(e,t={}){const{type:o="info",duration:i=3e3,persistent:n=!1}=t;this.showFeedback(e,o,n?0:i)}updateScore(e){const t=document.getElementById("score");t&&(t.textContent=e.toString())}updateProblemsSolved(e,t){const o=document.getElementById("problems-solved");o&&(o.textContent=`${e}/${t}`)}destroy(){__privateGet(this,M)&&clearTimeout(__privateGet(this,M)),__privateSet(this,P,[]),this.clearFeedback(),this.clearSolution()}}M=new WeakMap,P=new WeakMap,S=new WeakSet,G=function(e){return{success:"✅",error:"❌",warning:"⚠️",info:"ℹ️"}[e]||"ℹ️"},window.UIManager=ee;class te{constructor(){__privateAdd(this,E),console.log("🔧 DebugTools initialized")}analyzeProblems(){console.log("🔍 === ANALYZING PROBLEMS ===");const e=window.problemManager;if(!e||!e.problems)return void console.error("❌ No problem manager or problems available");const t=e.problems;console.log(`📊 Total problems: ${t.length}`);const o={},i={},n=[];t.forEach((e=>{const t=e.category||e.theme||"unknown",s=e.difficulty||"unknown";o[t]=(o[t]||0)+1,i[s]=(i[s]||0)+1,n.push(e.rating)})),console.log("📈 Category distribution:",o),console.log("⭐ Difficulty distribution:",i);const s=n.sort(((e,t)=>e-t)),a={min:s[0],max:s[s.length-1],avg:Math.round(n.reduce(((e,t)=>e+t),0)/n.length),median:s[Math.floor(s.length/2)]};console.log("📊 Rating statistics:",a),__privateMethod(this,E,C).call(this,{total:t.length,categories:o,difficulties:i,ratings:a})}logGameState(){console.log("🎮 === CURRENT GAME STATE ===");const e=window.game,t=window.currentProblem,o=window.playerScore,i=window.solvedProblems;console.log("♟️ Chess game state:"),e?(console.log(`   FEN: ${e.fen()}`),console.log(`   Turn: ${e.turn()}`),console.log(`   History: ${e.history().join(" ")}`),console.log(`   In check: ${e.isCheck()}`),console.log(`   Game over: ${e.isGameOver()}`)):console.log("   ❌ No game instance available"),console.log("🧩 Current problem:"),t?(console.log(`   ID: ${t.id}`),console.log(`   Title: ${t.title}`),console.log(`   Category: ${t.category||t.theme}`),console.log(`   Difficulty: ${t.difficulty}`),console.log(`   Rating: ${t.rating}`),console.log(`   Solution: ${t.solution.join(", ")}`)):console.log("   ❌ No current problem loaded"),console.log("📊 Player statistics:"),console.log(`   Score: ${o||0}`),console.log(`   Solved problems: ${Array.isArray(i)?i.length:0}`),console.log("🌐 Global objects:"),console.log("   coreManager: "+typeof window.coreManager),console.log("   boardManager: "+typeof window.boardManager),console.log("   problemManager: "+typeof window.problemManager),console.log("   uiManager: "+typeof window.uiManager),console.log("   gameLogic: "+typeof window.gameLogic)}exportGameData(){var e,t,o,i,n,s,a,r;const l={timestamp:(new Date).toISOString(),gameState:{fen:null==(e=window.game)?void 0:e.fen(),turn:null==(t=window.game)?void 0:t.turn(),history:null==(o=window.game)?void 0:o.history(),inCheck:null==(i=window.game)?void 0:i.isCheck(),gameOver:null==(n=window.game)?void 0:n.isGameOver()},currentProblem:window.currentProblem,playerStats:{score:window.playerScore||0,solvedProblems:window.solvedProblems||[]},problemDatabase:{total:(null==(a=null==(s=window.problemManager)?void 0:s.problems)?void 0:a.length)||0,loaded:!!(null==(r=window.problemManager)?void 0:r.problems)}};return console.log("💾 Game data exported:",l),navigator.clipboard&&navigator.clipboard.writeText(JSON.stringify(l,null,2)).then((()=>console.log("📋 Data copied to clipboard"))).catch((e=>console.log("❌ Failed to copy to clipboard:",e))),l}testBoard(){console.log("🧪 === TESTING BOARD FUNCTIONALITY ===");const e=window.boardManager;if(e){console.log("✅ Board manager available"),console.log("   Board instance: "+typeof e.board);try{const t="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";e.updatePosition(t),console.log("✅ Position update test passed")}catch(t){console.error("❌ Position update test failed:",t)}try{e.setBoardOrientation("w"),console.log("✅ Board orientation test passed")}catch(t){console.error("❌ Board orientation test failed:",t)}}else console.error("❌ Board manager not available")}clearDebugDisplay(){const e=document.getElementById("debug-analysis");e&&(e.style.display="none",e.innerHTML="")}destroy(){this.clearDebugDisplay()}}E=new WeakSet,C=function(e){const t=`\n📊 Problem Database Analysis:\n• Total: ${e.total} problems\n• Categories: ${Object.keys(e.categories).length}\n• Difficulties: ${Object.keys(e.difficulties).length}\n• Rating range: ${e.ratings.min}-${e.ratings.max} (avg: ${e.ratings.avg})\n        `.trim(),o=window.uiManager;o&&"function"==typeof o.showFeedback&&o.showFeedback(t,"info",8e3);const i=document.getElementById("debug-analysis");i&&(i.innerHTML=`\n                <h4>📊 Database Analysis</h4>\n                <div class="analysis-section">\n                    <h5>Categories (${Object.keys(e.categories).length}):</h5>\n                    ${Object.entries(e.categories).map((([e,t])=>`<span class="stat-item">${e}: ${t}</span>`)).join("")}\n                </div>\n                <div class="analysis-section">\n                    <h5>Difficulties:</h5>\n                    ${Object.entries(e.difficulties).map((([e,t])=>`<span class="stat-item">${e}: ${t}</span>`)).join("")}\n                </div>\n                <div class="analysis-section">\n                    <h5>Ratings:</h5>\n                    <span class="stat-item">Min: ${e.ratings.min}</span>\n                    <span class="stat-item">Max: ${e.ratings.max}</span>\n                    <span class="stat-item">Average: ${e.ratings.avg}</span>\n                </div>\n            `,i.style.display="block")},window.DebugTools=te;const oe=function(){if("undefined"!=typeof window&&window.Chess)return window.Chess;if(void 0!==oe)return oe;throw new Error("Chess.js not available. Make sure it is loaded via script tag.")}();"undefined"!=typeof window&&(window.Chess=oe),console.log("♟️ Chess.js loaded in production mode");B=new WeakMap,I=new WeakMap,A=new WeakMap,L=new WeakMap,T=new WeakMap,D=new WeakMap,O=new WeakMap,N=new WeakMap,z=new WeakSet,R=async function(){try{if(void 0===window.Chess&&"undefined"==typeof Chess)return console.warn("⚠️ Chess.js not yet loaded, waiting..."),void setTimeout((()=>__privateMethod(this,z,R).call(this)),100);console.log("♟️ Chess.js available in production mode"),__privateMethod(this,z,j).call(this)}catch(e){console.error("❌ Failed to initialize production environment:",e),this.handleError(e,"Production Environment Setup")}},j=function(){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>{console.log("📄 DOM content loaded, starting production initialization..."),setTimeout((()=>this.init()),100)})):"interactive"===document.readyState?(console.log("📄 DOM interactive, waiting for complete..."),setTimeout((()=>this.init()),200)):(console.log("📄 DOM already complete, starting production initialization..."),setTimeout((()=>this.init()),50))},F=function(){__privateGet(this,I).set("board",new Y),__privateGet(this,I).set("problems",new Z),__privateGet(this,I).set("gameLogic",new X),__privateGet(this,I).set("ui",new ee),__privateGet(this,I).set("debug",new te),this.modules=__privateGet(this,I),console.log("📦 All modules initialized for production")},x=function(){const e=document.getElementById("myBoard");return console.log("   📋 Critical element check:"),console.log(`     myBoard: ${e?"✅":"❌"} Chess board container`),e?(console.log("   ✅ Critical DOM elements found"),!0):(this.handleWarning("Board element not found, will retry","DOM Check"),!1)},W=function(){const e={jQuery:"undefined"!=typeof $,"Chess.js":"undefined"!=typeof Chess||void 0!==window.Chess,"Chessboard.js":void 0!==window.Chessboard};console.log("   📋 Production library status:",e);const t=Object.entries(e).filter((([e,t])=>!t)).map((([e])=>e));return t.length>0?(this.handleError(`Missing required libraries: ${t.join(", ")}`,"Library Check"),!1):(console.log("   ✅ All required libraries loaded"),!0)},H=async function(){__privateSet(this,A,new AbortController);const{signal:e}=__privateGet(this,A);[{id:"newProblemBtn",handler:()=>this.loadRandomProblem()},{id:"checkSolutionBtn",handler:()=>this.checkSolution()},{id:"getHintBtn",handler:()=>this.showHint()},{id:"resetPositionBtn",handler:()=>this.resetPosition()},{id:"debugShowSolution",handler:()=>this.showSolution()},{id:"debugAnalyzeProblems",handler:()=>this.analyzeProblems()}].forEach((({id:t,handler:o})=>{const i=document.getElementById(t);i?i.addEventListener("click",o,{signal:e}):this.handleWarning(`Button element not found: ${t}`,"UI Setup")})),document.addEventListener("keydown",__privateMethod(this,z,q).bind(this),{signal:e}),console.log("   ✅ Event handlers configured")},q=function(e){var t;const o=null==(t=e.key)?void 0:t.toLowerCase();if(!e.ctrlKey&&!e.altKey)switch(o){case"n":e.preventDefault(),this.loadRandomProblem();break;case"h":e.preventDefault(),this.showHint();break;case"s":e.preventDefault(),this.showSolution()}},U=function(e){var t,o;try{__privateGet(this,D).currentProblem=e,null==(t=__privateGet(this,O))||t.load(e.fen);const i=__privateGet(this,I).get("board");i.updatePosition(e.fen),i.setBoardOrientation((null==(o=__privateGet(this,O))?void 0:o.turn())||"w");__privateGet(this,I).get("problems").displayProblem(e);const n=__privateGet(this,I).get("ui");n.updateGameStatus("Hvit sin tur"),n.clearFeedback(),n.clearSolution(),console.log("✅ Problem loaded successfully")}catch(i){this.handleError(i,"Problem Loading")}},K=function(){window.coreManager=this,window.boardManager=__privateGet(this,I).get("board"),window.problemManager=__privateGet(this,I).get("problems"),window.gameLogic=__privateGet(this,I).get("gameLogic"),window.uiManager=__privateGet(this,I).get("ui"),window.debugTools=__privateGet(this,I).get("debug"),window.game=__privateGet(this,O),window.board=__privateGet(this,N),Object.defineProperty(window,"currentProblem",{get:()=>__privateGet(this,D).currentProblem,set:e=>{__privateGet(this,D).currentProblem=e}}),window.loadRandomProblem=()=>this.loadRandomProblem(),window.showHint=()=>this.showHint(),window.showSolution=()=>this.showSolution(),console.log("🌐 Production globals exposed")},Q=function(){__privateGet(this,I).get("ui").showFeedback("Velkommen til Chess Hawk! 🦅 (Production Mode)","info")},V=function(){try{const e=localStorage.getItem("chesshawk-state");if(e){const t=JSON.parse(e);__privateSet(this,D,{...__privateGet(this,D),score:t.playerScore||0,solvedProblems:t.solvedProblems||0,totalProblems:t.totalProblems||0}),console.log("💾 Loaded persisted state:",__privateGet(this,D))}}catch(e){console.warn("⚠️ Could not load persisted state:",e)}},console.log("🚀 ChessHawk Production Bundle Loaded");const ie=new class{constructor(){__privateAdd(this,z),__privateAdd(this,B,!1),__privateAdd(this,I,new Map),__privateAdd(this,A,null),__privateAdd(this,L,0),__privateAdd(this,T,5),__privateAdd(this,D,{initialized:!1,currentProblem:null,score:0,totalProblems:0,solvedProblems:0}),__privateAdd(this,O,null),__privateAdd(this,N,null),__publicField(this,"initialized",!1),__publicField(this,"modules",new Map),console.log("🚀 ChessHawk Production Mode - CoreManager initialized"),__privateMethod(this,z,F).call(this),__privateMethod(this,z,V).call(this),__privateMethod(this,z,R).call(this)}async init(){if(__privateGet(this,B))console.warn("⚠️ CoreManager already initialized");else{console.log("🚀 === ChessHawk PRODUCTION INITIALIZATION START ===");try{if(console.log("   📚 Checking required libraries..."),!__privateMethod(this,z,W).call(this))throw new Error("Required libraries not loaded");console.log("   ♟️ Initializing Chess.js game...");const t=window.Chess||window.Chess||Chess;if(__privateSet(this,O,new t),console.log("   🔍 Checking required DOM elements..."),!__privateMethod(this,z,x).call(this)){if(__privateGet(this,L)<__privateGet(this,T))return __privateWrapper(this,L)._++,console.log(`   ⏳ DOM elements not ready, retrying ${__privateGet(this,L)}/${__privateGet(this,T)} in 500ms...`),void setTimeout((()=>this.init()),500);this.handleWarning("Max retries reached, proceeding anyway","DOM Check")}console.log("   🏁 Initializing chessboard...");const o=__privateGet(this,I).get("board");__privateSet(this,N,o.initializeBoard()),__privateMethod(this,z,K).call(this),console.log("   🎮 Setting up UI event handlers..."),await __privateMethod(this,z,H).call(this),console.log("   📂 Loading problems database...");const i=__privateGet(this,I).get("problems");try{await i.loadProblems()}catch(e){console.warn("⚠️ Problems database could not be loaded, using fallback"),"file:"===window.location.protocol&&(console.log("💡 Tip: Use a web server for better compatibility"),console.log("   Command: python3 -m http.server 8000"),console.log("   Then visit: http://localhost:8000/"))}console.log("   🎲 Loading first problem..."),this.loadRandomProblem(),__privateSet(this,B,!0),this.initialized=!0,__privateGet(this,D).initialized=!0,console.log("✅ === ChessHawk PRODUCTION INITIALIZATION COMPLETE ==="),__privateMethod(this,z,Q).call(this)}catch(e){this.handleError(e,"ChessHawk Production Initialization")}}}loadRandomProblem(){console.log("🎲 === LOADING RANDOM PROBLEM ===");const e=__privateGet(this,I).get("problems").getRandomProblem();e?__privateMethod(this,z,U).call(this,e):console.error("❌ Failed to get random problem")}showHint(){__privateGet(this,I).get("gameLogic").showHint()}showSolution(){__privateGet(this,I).get("gameLogic").showSolution()}checkSolution(){__privateGet(this,I).get("gameLogic").checkSolution()}resetPosition(){const e=__privateGet(this,D).currentProblem;if(e&&__privateGet(this,O)){__privateGet(this,O).load(e.fen);__privateGet(this,I).get("board").updatePosition(e.fen);const t=__privateGet(this,I).get("ui");t.clearFeedback(),t.updateGameStatus("Posisjon tilbakestilt"),console.log("🔄 Position reset")}}analyzeProblems(){__privateGet(this,I).get("debug").analyzeProblems()}handleError(e,t="Unknown",o=!0){const i=(null==e?void 0:e.message)||e||"Unknown error",n=`${t}: ${i}`;if(console.error(`❌ ${n}`,e),o){const e=__privateGet(this,I).get("ui");null==e||e.showFeedback(`❌ ${i}`,"error")}return{context:t,message:i,timestamp:(new Date).toISOString(),handled:!0}}handleWarning(e,t="Warning",o=!1){const i=`${t}: ${e}`;if(console.warn(`⚠️ ${i}`),o){const t=__privateGet(this,I).get("ui");null==t||t.showFeedback(`⚠️ ${e}`,"warning")}return{context:t,message:e,timestamp:(new Date).toISOString(),type:"warning"}}get gameState(){return{...__privateGet(this,D)}}getModule(e){return __privateGet(this,I).get(e)}get game(){return __privateGet(this,O)}get board(){return __privateGet(this,N)}destroy(){var e;null==(e=__privateGet(this,A))||e.abort(),__privateGet(this,I).forEach((e=>{"function"==typeof e.destroy&&e.destroy()})),__privateGet(this,I).clear(),__privateSet(this,B,!1)}};window.chessHawk=ie}();
