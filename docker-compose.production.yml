version: '3.8'

# Production deployment configuration
# Use this for deploying Chess Hawk to cloud platforms

services:
  # Production Chess Hawk application
  chess-hawk:
    build:
      context: .
      target: production
      args:
        - NODE_ENV=production
    
    # Container configuration
    container_name: chess-hawk-production
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    
    # Port mapping
    ports:
      - "80:80"
    
    # Environment variables
    environment:
      - NODE_ENV=production
      - PORT=80
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    
    # Labels for monitoring and organization
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chess-hawk.rule=Host(`chess-hawk.yourdomain.com`)"
      - "traefik.http.routers.chess-hawk.tls=true"
      - "traefik.http.routers.chess-hawk.tls.certresolver=letsencrypt"
      - "com.docker.compose.project=chess-hawk"
      - "com.docker.compose.service=web"

  # Redis for caching (optional - for future features)
  redis:
    image: redis:7-alpine
    container_name: chess-hawk-redis
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    
    # Configuration
    command: redis-server --save 60 1 --loglevel warning --maxmemory 100mb --maxmemory-policy allkeys-lru
    
    # Data persistence
    volumes:
      - redis_data:/data
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    
    # Labels
    labels:
      - "com.docker.compose.project=chess-hawk"
      - "com.docker.compose.service=cache"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: chess-hawk-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    labels:
      - "com.docker.compose.project=chess-hawk"
      - "com.docker.compose.service=monitoring"

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: chess-hawk-grafana
    restart: unless-stopped
    profiles:
      - monitoring
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    labels:
      - "com.docker.compose.project=chess-hawk"
      - "com.docker.compose.service=visualization"

  # Traefik reverse proxy (optional)
  traefik:
    image: traefik:v2.10
    container_name: chess-hawk-traefik
    restart: unless-stopped
    profiles:
      - proxy
    
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - traefik_certificates:/certificates
    
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.yourdomain.com`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "com.docker.compose.project=chess-hawk"
      - "com.docker.compose.service=proxy"

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  traefik_certificates:
    driver: local

# Network configuration
networks:
  default:
    driver: bridge
    name: chess-hawk-production
    ipam:
      config:
        - subnet: 172.20.0.0/16